name: Security Scans

on:
  schedule:
    # Run daily security scans at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # SAST - Static Application Security Testing
  sast-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: ESLint Security Rules
      run: |
        npm install --save-dev eslint-plugin-security
        npx eslint --ext .js src/ --config .eslintrc.security.js

    - name: Semgrep Security Scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: p/security-audit
        generateSarif: true

    - name: Upload Semgrep results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  # SCA - Software Composition Analysis
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: NPM Audit
      run: |
        npm audit --audit-level=moderate
        npm audit --json > npm-audit.json || true

    - name: Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --json > snyk-results.json

    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'banking-app'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 6
          --suppression suppression.xml

    - name: Upload Dependency Check Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report
        path: reports/

    - name: License Compliance Check
      run: |
        npm install -g license-checker
        license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' --excludePrivatePackages

  # Secrets Scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog Secrets Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: GitLeaks Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload GitLeaks report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gitleaks-report
        path: results.sarif

  # DAST - Dynamic Application Security Testing
  dast-scan:
    name: Dynamic Security Testing
    runs-on: ubuntu-latest
    needs: []
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: banking_test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install and start application
      run: |
        npm ci
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_NAME: banking_test_db
        JWT_SECRET: test-jwt-secret-key
        PORT: 3000

    - name: Wait for application
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a -j -m 5 -T 60'

    - name: OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.8.0
      if: github.event_name == 'schedule'
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a -j -m 10 -T 180'

    - name: Upload ZAP results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-report
        path: report_html.html

  # Infrastructure Security
  infrastructure-scan:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Checkov Security Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,secrets
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif

    - name: Hadolint Dockerfile Scan
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: docker/Dockerfile
        format: sarif
        output-file: hadolint-results.sarif

    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif

  # Container Security Scanning
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -f docker/Dockerfile -t banking-app:test .

    - name: Trivy Container Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'banking-app:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Grype Container Scan
      uses: anchore/scan-action@v3
      with:
        image: 'banking-app:test'
        severity-cutoff: medium
        fail-build: true

  # Security Metrics and Reporting
  security-reporting:
    name: Security Reporting
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, secrets-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4

    - name: Generate Security Report
      run: |
        mkdir -p security-reports
        echo "# Security Scan Summary" > security-reports/summary.md
        echo "Generated on: $(date)" >> security-reports/summary.md
        echo "" >> security-reports/summary.md
        
        # Process results and generate summary
        if [ -f "dependency-check-report/dependency-check-report.json" ]; then
          echo "## Dependency Vulnerabilities" >> security-reports/summary.md
          jq -r '.dependencies[].vulnerabilities[]? | "- \(.name): \(.severity)"' dependency-check-report/dependency-check-report.json >> security-reports/summary.md
        fi

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: security-reports/

    - name: Notify Security Team
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'ðŸš¨ Security scan failed! Please check the results.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}